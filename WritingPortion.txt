Frequency analysis (James)

The frequency analysis tool developed in this project is designed to deconstruct any given text by counting the occurrences of each character or symbol. Essentially, the tool converts raw text into a statistical distribution, revealing hidden patterns within the data. By iterating over every character in a string and maintaining a count of its occurrences using Python’s dictionary data structure, the tool generates a clear frequency profile. This profile is particularly valuable in the context of classic substitution ciphers, as certain letters—such as “E” in English—tend to appear more frequently than others. In ciphertext, such frequency patterns can guide cryptanalysts in making informed guesses about the correspondence between encrypted symbols and common letters in the target language, thereby aiding the decryption process.

In any natural language, some letters and symbols occur more frequently than others. For instance, English texts typically feature 'E' as the most common letter, followed by letters like 'T', 'A', and 'O'. A simple substitution cipher—which replaces each plaintext letter with a unique symbol—tends to preserve these natural frequencies. This means that even though the letters have been scrambled, the relative proportions of each character remain largely intact. By carefully counting how many times each symbol appears in the ciphertext, it is possible to generate a frequency profile—a kind of statistical fingerprint of the text. This profile can then be compared to the known frequency distribution of the target language. From this it makes it easier to be able to decipher the original text.


RSA (Isaac)

This RSA tool, implemented in Zig, parses and formats both public and private keys based on well-known standards (RFC 4253 for public keys and RFC 8017 for private keys). It converts text messages into big integers and then uses modular exponentiation to perform encryption and decryption. Key functions include decoding keys from base64 or PEM formats, extracting components like exponents and moduli, and handling large-number arithmetic (such as computing multiplicative inverses via the extended Euclidean algorithm), all of which work together to securely transform data.

RSA is very valuable for cryptography because it facilitates secure communication through the use of asymmetric key pairs—one key for encryption and a different one for decryption. The method relies on complex mathematical operations, particularly the difficulty of factoring the product of two large prime numbers, making it practically infeasible to reverse without the corresponding private key. This inherent challenge ensures that only those with the proper private key can decrypt and access the data. These properties make RSA a great for protecting data transmissions, verifying digital signatures, and supporting secure authentication protocols across various applications.




OTP (Gwilym)

This OTP tool, implemented in Python, provides two complementary interfaces—textPad for alphanumeric messages and digitalPad for binary/hexadecimal data—anchored by the OTPmain menu. In text mode, the program sanitizes user input to include only characters from a predefined lettercodes list, then either accepts a user‑provided pad or generates a truly random pad of equal length (repeating it if necessary). Encryption maps each character to its index in lettercodes, adds the corresponding pad index modulo 36, and converts the result back to a character; decryption subtracts the pad index instead of adding it. In digital mode, the tool auto‑detects whether the input is binary or hexadecimal, parses it into an integer, and similarly accepts or generates a random key of matching bit‑length. It then performs a bitwise XOR between the message integer and the key, outputting ciphertext and pad in both binary and hexadecimal formats. Both modes loop to allow repeated operations until the user chooses to exit—achieving perfect secrecy across both text and digital data.

The one‑time pad achieves perfect secrecy by combining plaintext with a truly random, single‑use key at least as long as the message, ensuring that the resulting ciphertext is statistically independent of—and thus reveals no information about—the original text. By providing both a modular‑arithmetic interface for alphanumeric messages and a bitwise‑XOR interface for binary/hex data, this tool vividly demonstrates the three critical requirements for OTP security—genuinely random key generation, strict one‑time use, and secure key management—offering a hands‑on exploration of information‑theoretic security and reinforcing why one‑time pads remain the gold standard for absolute confidentiality.



Thank you Ethan for doing the writing
James did the GUI.